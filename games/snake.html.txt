<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Snake Game</title>
  <style>
    body {
      margin: 0;
      background: black;
      color: #00ff00;
      font-family: monospace;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      height: 100vh;
    }
    canvas {
      border: 1px solid #00ff00;
    }
    #score {
      margin-bottom: 10px;
      font-size: 1.5em;
    }
  </style>
</head>
<body>
<div id="score">Score: 0</div>
<canvas id="snakeCanvas" width="300" height="300"></canvas>
<script>
  const canvas = document.getElementById("snakeCanvas");
  const ctx = canvas.getContext("2d");
  const gridSize = 15;
  const tileCount = canvas.width / gridSize;
  let snake = [{x: 10, y: 10}];
  let food = {x: 5, y: 5};
  let dx = 1, dy = 0;
  let score = 0;
  let speed = 150;
  let gameInterval;

  const eatSound = new Audio('eat.mp3'); // Replace with your sound file path
  const gameOverSound = new Audio('gameover.mp3'); // Replace with your sound file path

  function resetGame() {
    snake = [{x: 10, y: 10}];
    food = {x: Math.floor(Math.random() * tileCount), y: Math.floor(Math.random() * tileCount)};
    dx = 1;
    dy = 0;
    score = 0;
    speed = 150;
    document.getElementById("score").textContent = `Score: ${score}`;
    clearInterval(gameInterval);
    gameInterval = setInterval(gameLoop, speed);
  }

  function gameLoop() {
    const head = {x: snake[0].x + dx, y: snake[0].y + dy};
    snake.unshift(head);

    // Check if the snake eats food
    if (head.x === food.x && head.y === food.y) {
      score++;
      document.getElementById("score").textContent = `Score: ${score}`;
      food = {
        x: Math.floor(Math.random() * tileCount),
        y: Math.floor(Math.random() * tileCount)
      };
      eatSound.play();
      speed = Math.max(50, speed - 5); // Increase speed but cap it at 50ms
      clearInterval(gameInterval);
      gameInterval = setInterval(gameLoop, speed);
    } else {
      snake.pop();
    }

    // Check for collisions
    if (
      head.x < 0 || head.y < 0 || head.x >= tileCount || head.y >= tileCount ||
      snake.slice(1).some(p => p.x === head.x && p.y === head.y)
    ) {
      gameOverSound.play();
      alert("Game Over! Your score: " + score);
      resetGame();
      return;
    }

    // Draw the game board
    ctx.fillStyle = "black";
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // Draw the food
    ctx.fillStyle = "#f00";
    ctx.fillRect(food.x * gridSize, food.y * gridSize, gridSize - 1, gridSize - 1);

    // Draw the snake with gradient effect
    snake.forEach((segment, index) => {
      const gradient = ctx.createLinearGradient(
        segment.x * gridSize, segment.y * gridSize,
        (segment.x + 1) * gridSize, (segment.y + 1) * gridSize
      );
      gradient.addColorStop(0, "#00ff00");
      gradient.addColorStop(1, "#003300");
      ctx.fillStyle = gradient;
      ctx.fillRect(segment.x * gridSize, segment.y * gridSize, gridSize - 1, gridSize - 1);
    });
  }

  window.addEventListener("keydown", e => {
    switch (e.key) {
      case "ArrowUp": if (dy === 0) { dx = 0; dy = -1; } break;
      case "ArrowDown": if (dy === 0) { dx = 0; dy = 1; } break;
      case "ArrowLeft": if (dx === 0) { dx = -1; dy = 0; } break;
      case "ArrowRight": if (dx === 0) { dx = 1; dy = 0; } break;
    }
  });

  resetGame();
</script>
</body>
</html>